//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/InputMaps/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @StandartInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @StandartInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""Standart"",
            ""id"": ""42890796-11ba-4f5f-8bfc-a610f6878b56"",
            ""actions"": [
                {
                    ""name"": ""OpenEscMenu"",
                    ""type"": ""Button"",
                    ""id"": ""83cf073b-77b6-41e1-8f8c-cf5148375289"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""080492b0-dbee-453d-b5eb-fdb4b9a6217d"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenEscMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""CameraRotate"",
            ""id"": ""6becee38-281d-493a-8f4d-6d5fe6683076"",
            ""actions"": [
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Value"",
                    ""id"": ""e827a030-770f-43aa-9063-1d0d6c64b990"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7a01c2b8-31a1-4014-b96c-43c75d8ef893"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": ""InvertVector2(invertX=false),ScaleVector2(x=0.25,y=0.25)"",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MapSwither"",
            ""id"": ""49c6e2a4-87f7-4779-a404-54eb54a47230"",
            ""actions"": [
                {
                    ""name"": ""StartCameraRotate"",
                    ""type"": ""Button"",
                    ""id"": ""c7860a74-b292-4e31-9c26-a4a5c8767dad"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f8649e87-fa49-40b3-9f1a-cce7614bbdea"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StartCameraRotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Standart
        m_Standart = asset.FindActionMap("Standart", throwIfNotFound: true);
        m_Standart_OpenEscMenu = m_Standart.FindAction("OpenEscMenu", throwIfNotFound: true);
        // CameraRotate
        m_CameraRotate = asset.FindActionMap("CameraRotate", throwIfNotFound: true);
        m_CameraRotate_Rotate = m_CameraRotate.FindAction("Rotate", throwIfNotFound: true);
        // MapSwither
        m_MapSwither = asset.FindActionMap("MapSwither", throwIfNotFound: true);
        m_MapSwither_StartCameraRotate = m_MapSwither.FindAction("StartCameraRotate", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Standart
    private readonly InputActionMap m_Standart;
    private IStandartActions m_StandartActionsCallbackInterface;
    private readonly InputAction m_Standart_OpenEscMenu;
    public struct StandartActions
    {
        private @StandartInputActions m_Wrapper;
        public StandartActions(@StandartInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @OpenEscMenu => m_Wrapper.m_Standart_OpenEscMenu;
        public InputActionMap Get() { return m_Wrapper.m_Standart; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(StandartActions set) { return set.Get(); }
        public void SetCallbacks(IStandartActions instance)
        {
            if (m_Wrapper.m_StandartActionsCallbackInterface != null)
            {
                @OpenEscMenu.started -= m_Wrapper.m_StandartActionsCallbackInterface.OnOpenEscMenu;
                @OpenEscMenu.performed -= m_Wrapper.m_StandartActionsCallbackInterface.OnOpenEscMenu;
                @OpenEscMenu.canceled -= m_Wrapper.m_StandartActionsCallbackInterface.OnOpenEscMenu;
            }
            m_Wrapper.m_StandartActionsCallbackInterface = instance;
            if (instance != null)
            {
                @OpenEscMenu.started += instance.OnOpenEscMenu;
                @OpenEscMenu.performed += instance.OnOpenEscMenu;
                @OpenEscMenu.canceled += instance.OnOpenEscMenu;
            }
        }
    }
    public StandartActions @Standart => new StandartActions(this);

    // CameraRotate
    private readonly InputActionMap m_CameraRotate;
    private ICameraRotateActions m_CameraRotateActionsCallbackInterface;
    private readonly InputAction m_CameraRotate_Rotate;
    public struct CameraRotateActions
    {
        private @StandartInputActions m_Wrapper;
        public CameraRotateActions(@StandartInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Rotate => m_Wrapper.m_CameraRotate_Rotate;
        public InputActionMap Get() { return m_Wrapper.m_CameraRotate; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraRotateActions set) { return set.Get(); }
        public void SetCallbacks(ICameraRotateActions instance)
        {
            if (m_Wrapper.m_CameraRotateActionsCallbackInterface != null)
            {
                @Rotate.started -= m_Wrapper.m_CameraRotateActionsCallbackInterface.OnRotate;
                @Rotate.performed -= m_Wrapper.m_CameraRotateActionsCallbackInterface.OnRotate;
                @Rotate.canceled -= m_Wrapper.m_CameraRotateActionsCallbackInterface.OnRotate;
            }
            m_Wrapper.m_CameraRotateActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Rotate.started += instance.OnRotate;
                @Rotate.performed += instance.OnRotate;
                @Rotate.canceled += instance.OnRotate;
            }
        }
    }
    public CameraRotateActions @CameraRotate => new CameraRotateActions(this);

    // MapSwither
    private readonly InputActionMap m_MapSwither;
    private IMapSwitherActions m_MapSwitherActionsCallbackInterface;
    private readonly InputAction m_MapSwither_StartCameraRotate;
    public struct MapSwitherActions
    {
        private @StandartInputActions m_Wrapper;
        public MapSwitherActions(@StandartInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @StartCameraRotate => m_Wrapper.m_MapSwither_StartCameraRotate;
        public InputActionMap Get() { return m_Wrapper.m_MapSwither; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MapSwitherActions set) { return set.Get(); }
        public void SetCallbacks(IMapSwitherActions instance)
        {
            if (m_Wrapper.m_MapSwitherActionsCallbackInterface != null)
            {
                @StartCameraRotate.started -= m_Wrapper.m_MapSwitherActionsCallbackInterface.OnStartCameraRotate;
                @StartCameraRotate.performed -= m_Wrapper.m_MapSwitherActionsCallbackInterface.OnStartCameraRotate;
                @StartCameraRotate.canceled -= m_Wrapper.m_MapSwitherActionsCallbackInterface.OnStartCameraRotate;
            }
            m_Wrapper.m_MapSwitherActionsCallbackInterface = instance;
            if (instance != null)
            {
                @StartCameraRotate.started += instance.OnStartCameraRotate;
                @StartCameraRotate.performed += instance.OnStartCameraRotate;
                @StartCameraRotate.canceled += instance.OnStartCameraRotate;
            }
        }
    }
    public MapSwitherActions @MapSwither => new MapSwitherActions(this);
    public interface IStandartActions
    {
        void OnOpenEscMenu(InputAction.CallbackContext context);
    }
    public interface ICameraRotateActions
    {
        void OnRotate(InputAction.CallbackContext context);
    }
    public interface IMapSwitherActions
    {
        void OnStartCameraRotate(InputAction.CallbackContext context);
    }
}
